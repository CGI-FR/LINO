// Code generated by mockery v1.0.0. DO NOT EDIT.

package push

import (
	mock "github.com/stretchr/testify/mock"
	"makeit.imfr.cgi.com/lino/pkg/push"
)

// MockSQLDialect is an autogenerated mock type for the SQLDialect type
type MockSQLDialect struct {
	mock.Mock
}

// ConvertValue provides a mock function with given fields: _a0
func (_m *MockSQLDialect) ConvertValue(_a0 push.Value) push.Value {
	ret := _m.Called(_a0)

	var r0 push.Value
	if rf, ok := ret.Get(0).(func(push.Value) push.Value); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(push.Value)
		}
	}

	return r0
}

// DisableConstraintsStatement provides a mock function with given fields: tableName
func (_m *MockSQLDialect) DisableConstraintsStatement(tableName string) string {
	ret := _m.Called(tableName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tableName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EnableConstraintsStatement provides a mock function with given fields: tableName
func (_m *MockSQLDialect) EnableConstraintsStatement(tableName string) string {
	ret := _m.Called(tableName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tableName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InsertStatement provides a mock function with given fields: tableName, columns, values, primaryKeys
func (_m *MockSQLDialect) InsertStatement(tableName string, columns []string, values []string, primaryKeys []string) string {
	ret := _m.Called(tableName, columns, values, primaryKeys)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []string, []string, []string) string); ok {
		r0 = rf(tableName, columns, values, primaryKeys)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsDuplicateError provides a mock function with given fields: _a0
func (_m *MockSQLDialect) IsDuplicateError(_a0 error) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Placeholder provides a mock function with given fields: _a0
func (_m *MockSQLDialect) Placeholder(_a0 int) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TruncateStatement provides a mock function with given fields: tableName
func (_m *MockSQLDialect) TruncateStatement(tableName string) string {
	ret := _m.Called(tableName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tableName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateStatement provides a mock function with given fields: tableName, columns, uValues, primaryKeys, pValues
func (_m *MockSQLDialect) UpdateStatement(tableName string, columns []string, uValues []string, primaryKeys []string, pValues []string) (string, *push.Error) {
	ret := _m.Called(tableName, columns, uValues, primaryKeys, pValues)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []string, []string, []string, []string) string); ok {
		r0 = rf(tableName, columns, uValues, primaryKeys, pValues)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *push.Error
	if rf, ok := ret.Get(1).(func(string, []string, []string, []string, []string) *push.Error); ok {
		r1 = rf(tableName, columns, uValues, primaryKeys, pValues)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*push.Error)
		}
	}

	return r0, r1
}
