# Copyright (C) 2021 CGI France
#
# This file is part of LINO.
#
# LINO is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LINO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LINO.  If not, see <http:#www.gnu.org/licenses/>.

name: push update
testcases:
  - name: push update single relation
    steps:
      # Clean working directory
      - script: rm -f *
      # Reset source database
      - script: sudo docker-compose -p lino stop source && sudo docker-compose -p lino rm -f source && sudo docker-compose -p lino up -d source
        assertions:
          - result.code ShouldEqual 0
      # Set up data connector
      - script: lino dataconnector add source postgresql://postgres:sakila@source:5432/postgres?sslmode=disable
      # Wait for database available (10 retries)
      - script: count=0; while ! lino dc ping source; do echo wait $count; ((count++)) && ((count>=10)) && break; sleep 1; done
        assertions:
          - result.code ShouldEqual 0
      # Set up config and ingress descriptor
      - script: lino relation extract source
      - script: lino table extract source
      - script: lino id create store
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      # Begin test
      - script: lino pull source --filter store_id=1 > store.json
      - script: cat store.json
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldContainSubstring "address_id":1
          - result.systemout ShouldContainSubstring "store_id":1
          - result.systemerr ShouldBeEmpty
      - script: sed -i 's/"address_id":1/"address_id":2/g' store.json
      - script: lino push update source < store.json
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty
          - result.systemerr ShouldBeEmpty
      - script: lino pull source --filter store_id=1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldContainSubstring "address_id":2
          - result.systemout ShouldContainSubstring "store_id":1
          - result.systemerr ShouldBeEmpty

  - name: push update without primary key
    steps:
      # Clean working directory
      - script: rm -f *
      # Set up data connector
      - script: lino dataconnector add source postgresql://postgres:sakila@source:5432/postgres?sslmode=disable
      - script: lino dataconnector add dest postgresql://postgres:sakila@dest:5432/postgres?sslmode=disable
      # Wait for database available (10 retries)
      - script: count=0; while ! lino dc ping source; do echo wait $count; ((count++)) && ((count>=10)) && break; sleep 1; done
      - script: count=0; while ! lino dc ping dest; do echo wait $count; ((count++)) && ((count>=10)) && break; sleep 1; done
      - script: touch relations.yaml tables.yaml
      - script: lino pull source --table store --filter store_id=1 | lino push -v 4 truncate -d --table store  dest
        assertions:
          - result.code ShouldEqual 0
          - result.systemerr ShouldContainSubstring "missing table store in tables.yaml"
          - result.systemerr ShouldContainSubstring "WRN"
          - result.systemerr ShouldNotContainSubstring "ON CONFLICT () DO NOTHING"

  - name: push update with primary key translation
    steps:
      # Clean working directory
      - script: rm -f *
      # Set up data connector
      - script: lino dataconnector add source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
      # Wait for database available (10 retries)
      - script: count=0; while ! lino dc ping source; do echo wait $count; ((count++)) && ((count>=10)) && break; sleep 1; done
      - script: lino relation extract source
      - script: lino table extract source
      - script: |-
          cat > cache.jsonl <<EOF
          {"key": 1, "value": 999}
          {"key": 2, "value": 998}
          EOF
      - script: |-
          cat > actor.jsonl <<EOF
          {"actor_id":999,"last_name":"UPDATE"}
          EOF
      - script: lino push update source --table actor --pk-translation actor.actor_id=cache.jsonl < actor.jsonl
      - script: lino pull source --table actor --filter actor_id=999
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldContainSubstring "actor_id":99
          - result.systemout ShouldContainSubstring "first_name":"PENELOPE"
          - result.systemout ShouldContainSubstring "last_name":"UPDATE"
          - result.systemerr ShouldBeEmpty

  - name: push update with filter from data
    steps:
      # Clean working directory
      - script: rm -f *
      # Set up data connector
      - script: lino dataconnector add source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
      # Wait for database available (10 retries)
      - script: count=0; while ! lino dc ping source; do echo wait $count; ((count++)) && ((count>=10)) && break; sleep 1; done
      - script: lino relation extract source
      - script: lino table extract source
      - script: |-
          cat > actor.jsonl <<EOF
          {"actor_id":998,"last_name":"UPDATE","__where__":{"actor_id":2}}
          EOF
      - script: lino push update source --table actor < actor.jsonl
      - script: lino pull source --table actor --filter actor_id=998
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldContainSubstring "actor_id":998
          - result.systemout ShouldContainSubstring "first_name":"NICK"
          - result.systemout ShouldContainSubstring "last_name":"UPDATE"
          - result.systemerr ShouldBeEmpty
