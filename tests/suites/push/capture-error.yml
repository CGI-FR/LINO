# Copyright (C) 2021 CGI France
#
# This file is part of LINO.
#
# LINO is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LINO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LINO.  If not, see <http:#www.gnu.org/licenses/>.

name: push and capture error
testcases:
  - name: prepare test
    steps:
      # Clean working directory
      - script: rm -f *
      - script: lino dataconnector add --read-only source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
      - script: lino relation extract source
      - script: lino table extract source
      - script: lino id create store
      - script: lino dataconnector add dest 'postgresql://postgres:sakila@dest:5432/postgres?sslmode=disable'
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup staff_store_id_fkey true
      - script: echo '{"address_id":1,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":null,"staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}' > store1.jsonl
      - script: echo '{"address_id":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":2,"staff_store_id_fkey":[{"active":true,"address_id":4,"email":"Jon.Stephens@sakilastaff.com","first_name":"Jon","last_name":"Stephens","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":null,"staff_id":2,"store_id":2,"username":"Jon"}],"store_id":2}' > store2.jsonl
      - script: cat store1.jsonl store2.jsonl | lino push -d truncate dest

  - name: push insert with  capture error
    steps:
      - script: echo '{"address_id":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}' > data.jsonl
      - script: lino push --catch-errors errors.jsonl dest < data.jsonl
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty
          - result.systemerr ShouldBeEmpty
      - script: cat errors.jsonl
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty
          - result.systemerr ShouldBeEmpty

  # FIXME: --catch-errors cannot work with Postgresql Driver because the transaction cannot be commited if even 1 error occured.
  # - name: push insert error with capture error
  #   steps:
  #     - script: echo '{"address_id_bad":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}' > data.jsonl
  #     - script: lino push --catch-errors errors.jsonl dest < data.jsonl
  #       assertions:
  #         - result.code ShouldEqual 0
  #         - result.systemout ShouldBeEmpty
  #         - result.systemerr ShouldBeEmpty
  #     - script: cat errors.jsonl
  #       assertions:
  #         - result.systemout ShouldEqual '{"address_id_bad":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}'
  #         - result.systemerr ShouldBeEmpty

  - name: push insert error without capture error
    steps:
      - script: echo '{"address_id_bad":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}' > data.jsonl
      - script: rm -f errors.jsonl
      - script: lino push dest < data.jsonl
        assertions:
          - result.code ShouldEqual 1
          - result.systemout ShouldBeEmpty
          - result.systemerr ShouldContainSubstring address_id_bad

  # FIXME: --catch-errors cannot work with Postgresql Driver because the transaction cannot be commited if even 1 error occured.
  # - name: push multi insert with one error and capture error
  #   steps:
  #     - script: echo '{"address_id_bad":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}' > data.jsonl
  #     # Fix with rollback on error
  #     # - script: echo '{"address_id":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}' >> data.jsonl
  #     - script: lino push -v 5 --catch-errors errors.jsonl truncate dest < data.jsonl
  #       assertions:
  #         - result.code ShouldEqual 0
  #         - result.systemout ShouldBeEmpty
  #         - result.systemerr ShouldContainSubstring Error catched
  #         - result.systemerr ShouldContainSubstring address_id_bad
  #         # Fix with rollback on error
  #         #- result.systemerr ShouldContainSubstring address_id
  #     - script: cat errors.jsonl
  #       assertions:
  #         - result.systemout ShouldEqual '{"address_id_bad":2,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}],"store_id":1}'
  #         - result.systemerr ShouldBeEmpty
