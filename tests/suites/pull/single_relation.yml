# Copyright (C) 2021 CGI France
#
# This file is part of LINO.
#
# LINO is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LINO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LINO.  If not, see <http:#www.gnu.org/licenses/>.

name: pull single relation
testcases:
  - name: prepare test
    steps:
      # Clean working directory
      - script: rm -f *
      - script: lino dataconnector add source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
      - script: lino relation extract source
      - script: lino table extract source --only-tables
      - script: lino id create store

  - name: pull child
    steps:
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup staff_store_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"address_id":1,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"store_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}]}
          - result.systemerr ShouldBeEmpty
      - script: lino id set-child-lookup staff_store_id_fkey false

  - name: pull child without data
    steps:
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup store_manager_staff_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"address_id":1,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"store_id":1}
          - result.systemerr ShouldBeEmpty

  - name: pull parent
    steps:
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-parent-lookup store_address_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"address_id":1,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"store_id":1,"store_address_id_fkey":{"address":"47 MySakila Drive","address2":null,"address_id":1,"city_id":300,"district":"Alberta","last_update":"2006-02-15T09:45:30Z","phone":"","postal_code":""}}
          - result.systemerr ShouldBeEmpty

  - name: pull parent without data
    steps:
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-parent-lookup staff_store_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"address_id":1,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"store_id":1}
          - result.systemerr ShouldBeEmpty

  - name: pull both
    steps:
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup staff_store_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"address_id":1,"last_update":"2006-02-15T09:57:12Z","manager_staff_id":1,"store_id":1,"staff_store_id_fkey":[{"active":true,"address_id":3,"email":"Mike.Hillyer@sakilastaff.com","first_name":"Mike","last_name":"Hillyer","last_update":"2006-05-16T16:13:11.79328Z","password":"8cb2237d0679ca88db6464eac60da96345513964","picture":"iVBORw0KWgo=","staff_id":1,"store_id":1,"username":"Mike"}]}
          - result.systemerr ShouldBeEmpty

  - name: pull benchmark single table
    steps:
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup staff_store_id_fkey true
      - script: lino pull source --limit 500
        assertions:
          - result.code ShouldEqual 0
          - result.systemerr ShouldBeEmpty
          - result.timeseconds ShouldBeLessThan 1

  - name: pull benchmark two tables
    steps:
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup staff_store_id_fkey true
      - script: lino id set-parent-lookup staff_store_id_fkey true
      - script: lino pull source --limit 500
        assertions:
          - result.code ShouldEqual 0
          - result.systemerr ShouldBeEmpty
          - result.timeseconds ShouldBeLessThan 1

  - name: pull round trip
    steps:
      - script: lino id create customer
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup customer_store_id_fkey true
      - script: lino id set-parent-lookup customer_store_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.customer_id ShouldEqual 1
          - result.systemoutjson.customer_store_id_fkey.store_id ShouldEqual 1
          # FIX ME #25
          # - result.systemoutjson.customer_store_id_fkey.customer_store_id_fkey.0 ShouldEqual 1
          - result.systemerr ShouldBeEmpty

  - name: pull round trip
    steps:
      - script: lino id create customer
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup customer_store_id_fkey true
      - script: lino id set-parent-lookup customer_store_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemoutjson.customer_id ShouldEqual 1
          - result.systemoutjson.customer_store_id_fkey.store_id ShouldEqual 1
          #FIX ME #25
          #- result.systemoutjson.customer_store_id_fkey.customer_store_id_fkey.0 ShouldEqual 1
          - result.systemerr ShouldBeEmpty

  - name: pull multi relations
    steps:
      - script: lino id create store
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-parent-lookup store_manager_staff_id_fkey true
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemerr ShouldBeEmpty
          - result.systemoutjson.store_id ShouldEqual 1
          - result.systemoutjson.store_manager_staff_id_fkey.staff_id ShouldEqual 1

  - name: pull single table with no connected relations
    steps:
      - script: lino id create customer
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-parent-lookup store_manager_staff_id_fkey true
      - script: lino pull source --limit 1 -f customer_id=1
        assertions:
          - result.code ShouldEqual 0
          - result.systemerr ShouldBeEmpty
          - result.systemoutjson.customer_id ShouldEqual 1

  - name: pull single table with complex filter
    steps:
      - script: lino id create customer
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino pull source --limit 1 -f customer_id=4 -f store_id=2
        assertions:
          - result.code ShouldEqual 0
          - result.systemerr ShouldBeEmpty
          - result.systemoutjson.customer_id ShouldEqual 4
          - result.systemoutjson.store_id ShouldEqual 2

  - name: pull single table with other schema

    steps:
      - script: lino dataconnector add other --schema other postgresql://postgres:sakila@source:5432/postgres?sslmode=disable
      - script: lino id create customer
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino -v 5 pull other --limit 1
        assertions:
          - result.code ShouldEqual 1
          - result.systemout ShouldBeEmpty
          - result.systemerr ShouldContainSubstring other.customer

  - name: pull single table with explicit schema

    steps:
      - script: rm -f *
      - script: lino dataconnector add source --schema public 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
      - script: lino relation extract source
      - script: lino table extract source --only-tables
      - script: lino id create customer
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino -v 5 pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"active":1,"activebool":true,"address_id":5,"create_date":"2006-02-14T00:00:00Z","customer_id":1,"email":"MARY.SMITH@sakilacustomer.org","first_name":"MARY","last_name":"SMITH","last_update":"2006-02-15T09:57:20Z","store_id":1}
          - result.systemerr ShouldContainSubstring "public"."customer"

  - name: pull with custom select columns on child in ingress descriptor
    steps:
      - script: lino id create store
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-child-lookup staff_store_id_fkey true
      - script: lino id set-child-select staff_store_id_fkey last_name first_name email
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"store_id":1,"manager_staff_id":1,"address_id":1,"last_update":"2006-02-15T09:57:12Z","staff_store_id_fkey":[{"first_name":"Mike","last_name":"Hillyer","email":"Mike.Hillyer@sakilastaff.com"}]}
          - result.systemerr ShouldBeEmpty
      - script: lino id set-child-lookup staff_store_id_fkey false

  - name: pull with custom select columns on parent in ingress descriptor
    steps:
      - script: lino id create store
      - script: sed -i "s/true/false/g" ingress-descriptor.yaml
      - script: lino id set-parent-lookup store_address_id_fkey true
      - script: lino id set-parent-select store_address_id_fkey district address
      - script: lino pull source --limit 1
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"store_id":1,"manager_staff_id":1,"address_id":1,"last_update":"2006-02-15T09:57:12Z","store_address_id_fkey":{"address":"47 MySakila Drive","district":"Alberta"}}
          - result.systemerr ShouldBeEmpty
