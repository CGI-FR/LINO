name: data connector ping
testcases:
- name: ping success
  steps:
      # Clean working directory
  - script: rm -f *
  # Enable mock credential helper as docker-credential-pass
  - script: cp /usr/local/bin/docker-credential-mock docker-credential-secretservice
  - script: export PATH=$PATH:$PWD
  - script: lino dataconnector add source postgresql://postgres:sakila@source:5432/postgres?sslmode=disable
  - script: lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring "ping success"
- name: ping failed
  steps:
      # Clean working directory
  - script: rm -f *
  # Enable mock credential helper as docker-credential-pass
  - script: cp /usr/local/bin/docker-credential-mock docker-credential-secretservice
  - script: lino dataconnector add source postgresql://postgres:sakila@source:4432/postgres?sslmode=disable
  - script: lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 1
      - result.systemout ShouldContainSubstring "ping failed"

- name: ping success password from env
  steps:
  - script: rm -f *
  # Enable mock credential helper as docker-credential-pass
  - script: cp /usr/local/bin/docker-credential-mock docker-credential-secretservice
  - script: lino dataconnector add --password-from-env=PASSWORD source 'postgresql://postgres@source:5432/postgres?sslmode=disable'
  - script: PASSWORD=sakila lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring "ping success"
- name: ping failed password from env
  steps:
  - script: rm -f * && unset PASSWORD
  - script: lino dataconnector add --password-from-env=PASSWORD source postgresql://postgres@source:5432/postgres?sslmode=disable
  - script: lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 1
      - result.systemout ShouldContainSubstring "ping failed"

- name: ping success password and user from env
  steps:
  - script: rm -f *
  - script: lino dataconnector add --user-from-env=USER --password-from-env=PASSWORD source postgresql://source:5432/postgres?sslmode=disable
  - script: USER=postgres PASSWORD=sakila lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring "ping success"
- name: ping failed password and user from env
  steps:
  - script: rm -f * && unset PASSWORD
  - script: lino dataconnector add --user-from-env=USER --password-from-env=PASSWORD source postgresql://source:5432/postgres?sslmode=disable
  - script: lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 1
      - result.systemout ShouldContainSubstring "ping failed"

- name: ping success password from env and user flag
  steps:
  - script: rm -f *
  - script: lino dataconnector add --user=postgres --password-from-env=PASSWORD source postgresql://source:5432/postgres?sslmode=disable
  - script: PASSWORD=sakila lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring "ping success"
- name: ping failed password from env and user flag
  steps:
  - script: rm -f * && unset PASSWORD
  - script: lino dataconnector add --user=postgres --password-from-env=PASSWORD source postgresql://source:5432/postgres?sslmode=disable
  - script: lino dataconnector ping source
    assertions:
      - result.code ShouldEqual 1
      - result.systemout ShouldContainSubstring "ping failed"