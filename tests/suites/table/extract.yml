# Copyright (C) 2021 CGI France
#
# This file is part of LINO.
#
# LINO is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LINO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LINO.  If not, see <http:#www.gnu.org/licenses/>.

name: table
testcases:

- name: extract table
  steps:
    - script: rm -f *
    - script: lino dataconnector add source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
    - script: lino table extract source
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldEqual "lino finds 15 table(s)"
        - result.systemerr ShouldBeEmpty
    # this next command is to render canonical result because keys are in a random order in the yaml file
    - script: yaml2json <tables.yaml | jq -S "." > tables.json
    - script: |-
        cat  > expected.json <<EOF
        {
          "tables": [
            {
              "keys": [
                "actor_id"
              ],
              "name": "actor"
            },
            {
              "keys": [
                "address_id"
              ],
              "name": "address"
            },
            {
              "keys": [
                "category_id"
              ],
              "name": "category"
            },
            {
              "keys": [
                "city_id"
              ],
              "name": "city"
            },
            {
              "keys": [
                "country_id"
              ],
              "name": "country"
            },
            {
              "keys": [
                "customer_id"
              ],
              "name": "customer"
            },
            {
              "keys": [
                "film_id"
              ],
              "name": "film"
            },
            {
              "keys": [
                "actor_id",
                "film_id"
              ],
              "name": "film_actor"
            },
            {
              "keys": [
                "category_id",
                "film_id"
              ],
              "name": "film_category"
            },
            {
              "keys": [
                "inventory_id"
              ],
              "name": "inventory"
            },
            {
              "keys": [
                "language_id"
              ],
              "name": "language"
            },
            {
              "keys": [
                "payment_id"
              ],
              "name": "payment"
            },
            {
              "keys": [
                "rental_id"
              ],
              "name": "rental"
            },
            {
              "keys": [
                "staff_id"
              ],
              "name": "staff"
            },
            {
              "keys": [
                "store_id"
              ],
              "name": "store"
            }
          ],
          "version": "v1"
        }
        EOF
    - script: diff expected.json tables.json
      assertions:
        - result.systemout ShouldBeEmpty
        - result.code ShouldEqual 0

- name: extract table with schema
  steps:
    - script: rm -f *
    - script: lino dataconnector add --schema public source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
    - script: lino table extract source
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldEqual "lino finds 15 table(s)"
        - result.systemerr ShouldBeEmpty
    # this next command is to render canonical result because keys are in a random order in the yaml file
    - script: yaml2json <tables.yaml | jq -S "." > tables.json
    - script: |-
        cat  > expected.json <<EOF
        {
          "tables": [
            {
              "keys": [
                "actor_id"
              ],
              "name": "actor"
            },
            {
              "keys": [
                "address_id"
              ],
              "name": "address"
            },
            {
              "keys": [
                "category_id"
              ],
              "name": "category"
            },
            {
              "keys": [
                "city_id"
              ],
              "name": "city"
            },
            {
              "keys": [
                "country_id"
              ],
              "name": "country"
            },
            {
              "keys": [
                "customer_id"
              ],
              "name": "customer"
            },
            {
              "keys": [
                "film_id"
              ],
              "name": "film"
            },
            {
              "keys": [
                "actor_id",
                "film_id"
              ],
              "name": "film_actor"
            },
            {
              "keys": [
                "category_id",
                "film_id"
              ],
              "name": "film_category"
            },
            {
              "keys": [
                "inventory_id"
              ],
              "name": "inventory"
            },
            {
              "keys": [
                "language_id"
              ],
              "name": "language"
            },
            {
              "keys": [
                "payment_id"
              ],
              "name": "payment"
            },
            {
              "keys": [
                "rental_id"
              ],
              "name": "rental"
            },
            {
              "keys": [
                "staff_id"
              ],
              "name": "staff"
            },
            {
              "keys": [
                "store_id"
              ],
              "name": "store"
            }
          ],
          "version": "v1"
        }
        EOF
    - script: diff expected.json tables.json
      assertions:
        - result.systemout ShouldBeEmpty
        - result.code ShouldEqual 0

- name: extract tables with unknow schema
  steps:
    - script: rm -f *
    - script: lino dataconnector add  --schema unkown source postgresql://postgres:sakila@source:5432/postgres?sslmode=disable
    - script: lino table extract source
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldEqual "lino finds 0 table(s)"
        - result.systemerr ShouldBeEmpty