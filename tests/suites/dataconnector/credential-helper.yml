name: data connector credential-helper
testcases:

- name: prepare test
  steps:
    # Make sure source database is up
    - script: docker-compose up -d source
      assertions:
        - result.code ShouldEqual 0
    # Clean working directory
    - script: rm -f *
    # Enable mock credential helper as docker-credential-pass
    - script: cp /usr/local/bin/docker-credential-mock docker-credential-secretservice
    - script: PATH=$PATH:$PWD
    # Wait for database available (10 retries)
    - script: lino dataconnector add source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
    - script: count=0; while ! lino dc ping source; do echo wait $count; ((count++)) && ((count>=10)) && break; sleep 1; done
      assertions:
        - result.code ShouldEqual 0

###################
## NOMINAL TESTS ##
###################

- name: username from flag, and password from prompt
  steps:
    - script: rm dataconnector.yaml credentials.yaml
    # Create dataconnector
    - script: |-
        expect <<EOF
        set basedir /workspace/tests/workspace
        spawn lino dc add --user postgres --password bdd "postgresql://source:5432/postgres?sslmode=disable"
        expect "enter password: "
        send "sakila\r"
        wait
        EOF
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldContainSubstring enter password
    #    - result.systemout ShouldContainSubstring successfully added dataconnector
    # Verify credentials store
    - script: echo 'postgresql://postgres@source:5432/postgres?sslmode=disable' | docker-credential-secretservice get
      assertions:
        - result.systemout ShouldEqual '{"ServerURL":"postgresql://postgres@source:5432/postgres?sslmode=disable","Username":"postgres","Secret":"sakila"}'
    # Verify dataconnector
    - script: |-
        cat > expected.yml <<EOF
        version: v1
        dataconnectors:
          - name: bdd
            url: postgresql://postgres@source:5432/postgres?sslmode=disable
            readonly: false
        EOF
    - script: diff expected.yml dataconnector.yaml
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldBeEmpty
    # Test ping
    - script: lino dc ping bdd
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldContainSubstring ping success

- name: username from url, and password from prompt
  steps:
    - script: rm dataconnector.yaml credentials.yaml
    # Create dataconnector
    - script: |-
        expect <<EOF
        set basedir /workspace/tests/workspace
        spawn lino dc add --password bdd "postgresql://postgres@source:5432/postgres?sslmode=disable"
        expect "enter password: "
        send "sakila\r"
        wait
        EOF
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldContainSubstring enter password
    #    - result.systemout ShouldContainSubstring successfully added dataconnector
    # Verify credentials store
    - script: echo 'postgresql://postgres@source:5432/postgres?sslmode=disable' | docker-credential-secretservice get
      assertions:
        - result.systemout ShouldEqual '{"ServerURL":"postgresql://postgres@source:5432/postgres?sslmode=disable","Username":"postgres","Secret":"sakila"}'
    # Verify dataconnector
    - script: |-
        cat > expected.yml <<EOF
        version: v1
        dataconnectors:
          - name: bdd
            url: postgresql://postgres@source:5432/postgres?sslmode=disable
            readonly: false
        EOF
    - script: diff expected.yml dataconnector.yaml
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldBeEmpty
    # Test ping
    - script: lino dc ping bdd
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldContainSubstring ping success

- name: username from url, and password from url
  steps:
    - script: rm dataconnector.yaml credentials.yaml
    # Create dataconnector
    - script: lino dc add bdd 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
      assertions:
        - result.code ShouldEqual 0
        - result.systemerr ShouldContainSubstring warn
        - result.systemerr ShouldContainSubstring password should not be included in URI
        - result.systemout ShouldContainSubstring successfully added dataconnector
    # Verify credentials store
    - script: echo 'postgresql://postgres@source:5432/postgres?sslmode=disable' | docker-credential-secretservice get
      assertions:
        - result.systemout ShouldEqual '{"ServerURL":"postgresql://postgres@source:5432/postgres?sslmode=disable","Username":"postgres","Secret":"sakila"}'
    # Verify dataconnector
    - script: |-
        cat > expected.yml <<EOF
        version: v1
        dataconnectors:
          - name: bdd
            url: postgresql://postgres@source:5432/postgres?sslmode=disable
            readonly: false
        EOF
    - script: diff expected.yml dataconnector.yaml
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldBeEmpty
    # Test ping
    - script: lino dc ping bdd
      assertions:
        - result.code ShouldEqual 0
        - result.systemout ShouldContainSubstring ping success

###########################################
## ERROR TESTS - CANNOT SAVE CREDENTIALS ##
###########################################

- name: username unspecified, and password from prompt
  steps:
    - script: rm dataconnector.yaml credentials.yaml
    # Create dataconnector
    - script: lino dc add --password bdd 'postgresql://source:5432/postgres?sslmode=disable'
      assertions:
        - result.code ShouldEqual 1
        - result.systemerr ShouldContainSubstring error
        - result.systemerr ShouldContainSubstring use --password-from-env or specify a username

- name: username from env, and password from prompt
  steps:
    - script: lino dc add --user-from-env USER --password bdd 'postgresql://source:5432/postgres?sslmode=disable'
      assertions:
        - result.code ShouldEqual 1
        - result.systemerr ShouldContainSubstring error
        - result.systemerr ShouldContainSubstring use --password-from-env or specify a username
