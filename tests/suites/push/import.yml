# Copyright (C) 2021 CGI France
#
# This file is part of LINO.
#
# LINO is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LINO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LINO.  If not, see <http:#www.gnu.org/licenses/>.

name: import different types
testcases:
  - name: prepare test
    steps:
      # Clean working directory
      - script: rm -f *
      - script: lino dataconnector add --read-only source 'postgresql://postgres:sakila@source:5432/postgres?sslmode=disable'
      - script: lino dataconnector add dest 'postgresql://postgres:sakila@dest:5432/postgres?sslmode=disable'
      - script: lino relation extract source

  - name: export then import binary value
    steps:
      - script: |-
          cat  > tables.yaml <<EOF
          version: v1
          tables:
            - name: "staff"
              keys:
                - "staff_id"
              columns:
                - name: "staff_id"
                - name: "picture"
                  export: "base64"
          EOF
      - script: lino pull source --filter staff_id=1 --table staff | lino push update dest --table staff
      - script: lino pull dest --filter staff_id=1 --table staff
        assertions:
          - result.systemerr ShouldBeEmpty
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"staff_id":1,"picture":"iVBORw0KWgo="}

  - name: export to different format than stored in datasource
    steps:
      - script: lino table extract source --only-tables
      - script: lino pull source --table customer --limit 0 | lino push truncate dest --table customer
      - script: |-
          cat  > tables.yaml <<EOF
          version: v1
          tables:
            - name: customer
              keys:
                - customer_id
              columns:
                - name: "customer_id"
                - name: "create_date"
                  export: "timestamp"
                  import: "time.Time"
          EOF
      - script: lino pull source --table customer --filter customer_id=1 | lino push update dest --table customer
      - script: lino pull dest --table customer --filter customer_id=1
        assertions:
          - result.systemerr ShouldBeEmpty
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"customer_id":1,"create_date":1139875200}

  - name: import with binary format
    steps:
      - script: |-
          cat  > tables.yaml <<EOF
          version: v1
          tables:
            - name: "staff"
              keys:
                - "staff_id"
              columns:
                - name: "staff_id"
                - name: "picture"
                  import: "base64"
                  export: "string"
          EOF
      - script: echo '{"staff_id":1,"picture":"SGVsbG8gd29ybGQ="}' | lino push update dest --table staff
      - script: lino pull dest --filter staff_id=1 --table staff
        assertions:
          - result.systemerr ShouldBeEmpty
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"staff_id":1,"picture":"Hello world"}

  - name: import with binary format and specify data type
    steps:
      - script: |-
          cat  > tables.yaml <<EOF
          version: v1
          tables:
            - name: "staff"
              keys:
                - "staff_id"
              columns:
                - name: "staff_id"
                - name: "picture"
                  import: "binary(string)"
                  export: "string"
          EOF
      - script: echo '{"staff_id":2,"picture":"SGVsbG8gd29ybGQ="}' | lino push update dest --table staff
      - script: lino pull dest --filter staff_id=2 --table staff
        assertions:
          - result.systemerr ShouldBeEmpty
          - result.code ShouldEqual 0
          - result.systemout ShouldEqual {"staff_id":2,"picture":"Hello world"}

  - name: import with file format
    steps:
      - script: rm tables.yaml
      - script: lino table extract source --only-tables
      - script: lino table add-column staff staff_id
      - script: lino table add-column staff picture --import file --export no
      - script: lino pull --table staff source | jq -c '.picture="../../data/avatar.png"' | lino push update --table staff dest
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty
          - result.systemerr ShouldBeEmpty

  - name: import no
    steps:
      - script: lino table extract source --only-tables
      - script: lino pull source --table customer --limit 0 | lino push truncate dest --table customer
      - script: |-
          cat  > tables.yaml <<EOF
          version: v1
          tables:
            - name: customer
              keys:
                - customer_id
              columns:
                - name: "customer_id"
                  import: "no"
                - name: "first_name"
          EOF
      - script: lino pull source --table customer --filter customer_id=1 | lino push update dest --table customer -vdebug
        assertions:
          - result.systemerr ShouldContainSubstring UPDATE customer SET first_name=$1 WHERE customer_id=$2
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty
